import time
import board
import busio
import csv
from adafruit_lsm303 import LSM303

# I²C 설정
i2c = busio.I2C(board.SCL, board.SDA)

# L3GD20 주소와 레지스터
L3GD20_ADDR = 0x69
CTRL_REG1 = 0x20
CTRL_REG4 = 0x23
OUT_X_L = 0x28
OUT_X_H = 0x29
OUT_Y_L = 0x2A
OUT_Y_H = 0x2B
OUT_Z_L = 0x2C
OUT_Z_H = 0x2D

# LSM303 초기화
lsm303 = LSM303(i2c)

# L3GD20 초기화
def init_gyro(i2c, addr):
    i2c.writeto(addr, bytes([CTRL_REG1, 0x0F]))  # Normal mode, all axes enabled
    i2c.writeto(addr, bytes([CTRL_REG4, 0x00]))  # ±250 dps (default)

# Signed Integer 변환
def convert_to_signed(value):
    if value & 0x8000:
        return value - 0x10000
    return value

# 레지스터 읽기
def read_register(i2c, addr, reg):
    result = bytearray(1)
    i2c.writeto_then_readfrom(addr, bytes([reg]), result)
    return result[0]

# L3GD20 센서 데이터 읽기
def read_gyro_data(i2c, addr):
    x = convert_to_signed((read_register(i2c, addr, OUT_X_H) << 8) | read_register(i2c, addr, OUT_X_L))
    y = convert_to_signed((read_register(i2c, addr, OUT_Y_H) << 8) | read_register(i2c, addr, OUT_Y_L))
    z = convert_to_signed((read_register(i2c, addr, OUT_Z_H) << 8) | read_register(i2c, addr, OUT_Z_L))
    return x, y, z

# L3GD20 초기화
init_gyro(i2c, L3GD20_ADDR)

# 데이터 측정 및 CSV 저장
filename = "imu_data.csv"
data = []

# 초기값 초기화
x_del_ang, y_del_ang, z_del_ang = 0.0, 0.0, 0.0  # 각도 변화량 초기화
x_error, y_error, z_error = 0.0, 0.0, 0.0  # 누적 오차 초기화
error_factor = 0.0001  # 누적 오차 비율
previous_time = time.time()  # 이전 시간 기록

try:
    for i in range(20000):
        # 현재 시간 계산
        current_time = time.time()
        dt = current_time - previous_time  # 시간 간격 계산
        previous_time = current_time

        # LSM303 가속도 데이터 읽기
        accel_x, accel_y, accel_z = lsm303.acceleration

        # L3GD20 자이로 데이터 읽기
        gyro_x, gyro_y, gyro_z = read_gyro_data(i2c, L3GD20_ADDR)

        # 각속도 적분 (각도 변화량 계산)
        x_del_ang += gyro_x * dt
        y_del_ang += gyro_y * dt
        z_del_ang += gyro_z * dt

        # 누적 오차 계산
        x_error += error_factor * gyro_x
        y_error += error_factor * gyro_y
        z_error += error_factor * gyro_z

        # 누적 오차 반영
        x_del_ang_with_error = x_del_ang + x_error
        y_del_ang_with_error = y_del_ang + y_error
        z_del_ang_with_error = z_del_ang + z_error

        # ROLL, PITCH, HEADING 계산 (기본적인 계산 방식)
        roll = math.atan2(accel_y, accel_z) * 180 / math.pi
        pitch = math.atan2(-accel_x, math.sqrt(accel_y**2 + accel_z**2)) * 180 / math.pi
        heading = math.atan2(accel_z, math.sqrt(accel_x**2 + accel_y**2)) * 180 / math.pi

        # IMU_MODE 설정
        imu_mode = 0 if i < 9500 else 8

        # 데이터 저장
        data.append([
            accel_x, accel_y, accel_z,
            gyro_x, gyro_y, gyro_z,
            x_del_ang_with_error, y_del_ang_with_error, z_del_ang_with_error,
            roll, pitch, heading,
            imu_mode
        ])

        # 중간 로그 출력
        if i % 1000 == 0:
            print(f"Progress: {i}/20000 samples collected")

        # 0.01초 대기
        time.sleep(0.01)

    # CSV 파일로 저장
    with open(filename, "w", newline="") as csvfile:
        csvwriter = csv.writer(csvfile)
        # 헤더 작성
        csvwriter.writerow([
            "Accel_X", "Accel_Y", "Accel_Z", 
            "Gyro_X", "Gyro_Y", "Gyro_Z", 
            "X_DEL_ANG", "Y_DEL_ANG", "Z_DEL_ANG", 
            "ROLL", "PITCH", "HEADING", "IMU_MODE"
        ])
        # 데이터 작성
        csvwriter.writerows(data)

    print(f"데이터가 {filename} 파일에 저장되었습니다.")

except KeyboardInterrupt:
    print("측정을 종료합니다.")
